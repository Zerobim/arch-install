#+TITLE: Instructions for new arch installation

* Install process
** Install script
#+BEGIN_SRC shell :tangle install.sh :shebang "#!/bin/bash"
out_file='install.out'
err_file='install.err'

./run_in_live.sh 2>"$err_file" | tee "$out_file"

#+END_SRC

** Configure live iso
*** Common config
**** Run
#+BEGIN_SRC shell :tangle custom.sh
set -exu

# File which overrides defaults
custom_override_file='custom_override.sh'
#+END_SRC

**** Explanation
This file gets sourced from the live system and from the installed system.

Maybe ~set~ does not work for some reason...

~-e~: Fail when anything fails.
~-x~: Print commands as they are executing.
~-u~: Unset variables are errors.

*** Source config
#+BEGIN_SRC shell :tangle run_in_live.sh :shebang "#!/bin/bash"
# Source configuration variables
. ./custom.sh
#+END_SRC

*** Remove beeps
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
# Remove module so no beeps
rmmod pcspkr || echo 'No beeps removed'
#+END_SRC

**** Explanation
The beeps when something fails can be helpful, but they are annoying.

*** Keyboard
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
# Load keyboard configuration.
loadkeys es
#+END_SRC

**** Debug
- List available keyboards: ~ls /usr/share/kbd/keymaps/**/*.map.gz~
- Change console font: ~setfont~. Fonts located in ~/usr/share/kbd/consolefonts~.

*** Verify boot mode
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
# Detect boot mode
boot_mode=$(ls /sys/firmware/efi/efivars 1>/dev/null && printf 'UEFI' || printf 'BIOS')
printf 'Boot mode is %s\n' "$boot_mode"

# Utilities
boot_mode_is_bios(){
    return [ "$boot_mode" = "BIOS" ]
}
boot_mode_is_uefi(){
    return [ "$boot_mode" = "UEFI" ]
}
#+END_SRC

**** Explanation
If ~/sys/firmware/efi/efivars~ exists, boot mode is UEFI, else its BIOS or CSM.

UEFI requires a special partition to be able to boot the system.

The installer image should try to boot in EFI mode first. Maybe?.

*** Verify network connectivity
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
# Connectivity check
ping -c 1 archlinux.org && echo 'Internet works!!' || echo 'ERROR: Internet does not work!'
#+END_SRC
**** Explanation
Required to be able to download and install packages.

*** Update system clock
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
# Use timedatectl to ensure the system clock is accurate
timedatectl set-ntp true
#+END_SRC

**** Explanation
This is important for downloading packages. Maybe?.
Check the service status with ~timedatectl status~.

** Install base system
*** Partition the disks
**** Run
#+BEGIN_SRC shell :tangle custom.sh
partition_scheme='partitions.sfdisk.in'
system_device='/dev/sda'
system_device_backup='partition_table.bak'
boot_partition="$system_device"1
swap_partition="$system_device"2
system_partition="$system_device"3

# Partition info
# ONLY GPT HERE RIGHT NOW
system_scheme_label='gpt'
# Boot partition
system_scheme_boot_size='200M'
system_scheme_boot_type='21686148-6449-6E6F-744E-656564454649'
system_scheme_boot_extra=',bootable'
# Should base this on 1.5 * RAM
system_scheme_swap_size='16G'
system_scheme_swap_type='S'
system_scheme_swap_extra=''
# Last partition uses rest of space
system_scheme_last_type='L'
system_scheme_last_extra=''
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_live.sh
# TODO remove me when finished
# Make trying again easier
swapoff "$swap_partition"
umount "$system_mp"

# !!!!!!!!!!! WARNING !!!!!!!!!!!!!
# !! Only works with BIOS/GPT  !!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
system_device_backup_full="$system_device_backup"$(date -I'ns')
# Backup $system_device
sfdisk --dump "$system_device" >"$system_device_backup_full"
# Restore with:
# sfdisk "$system_device" <"$system_device_backup"

# Partition disks
echo "label: $system_scheme_label" >"$partition_scheme"
echo '' >>"$partition_scheme"
printf "size=%s,type=%s%s\n" \
    "$system_scheme_boot_size" \
    "$system_scheme_boot_type" \
    "$system_scheme_boot_extra" \
    >>"$partition_scheme"

printf "size=%s,type=%s%s\n" \
    "$system_scheme_swap_size" \
    "$system_scheme_swap_type" \
    "$system_scheme_swap_extra" \
    >>"$partition_scheme"

printf "type=%s%s\n" \
    "$system_scheme_last_type" \
    "$system_scheme_last_extra" \
    >>"$partition_scheme"

sfdisk "$system_device" <"$partition_scheme"

#+END_SRC

**** Explanation
~fdisk <device>~
~cfdisk <device>~ is a curses version, more comfortable.
***** Required
- If boot mode is UEFI, a EFI system partition in ~/efi~ or
  ~/boot~.
  - ~/boot~: *Required for LVM, RAID, encryption, and BIOS/GPT*.
    Each kernel is \~30MB, but ~kernel-debug~ packages use more
    space. Too small might require manual resize or manually
    deleting old kernels. A suggested size for ~/boot~ is 200 MiB
    unless you are using EFI system partition as ~/boot~, in
    which case at least 260 MiB is recommended.

    *Recommendation*: Only on live systems (not VMs). Always the
    first partition. Server: 1GB. PC: 300MB-500MB.

    *NOTE*: DOS partition on GPT disk might be limited to 1MiB
    due to bug.

    Select type as ~BIOS boot~ on ~fdisk~.

    Set partition type as bios_boot on parted: ~parted
    /dev/disk set partition-number bios_grub on~

    BIOS/GPT: This partition can be in any position order but
    has to be on the first 2 TiB of the disk. This partition
    needs to be created before GRUB installation.

- Swap ( at least the amount of RAM. Min 512MiB ). Can use file
  but *partition allows to hibernate* the system. With Linux
  >2.6, partition and *static* file have the same speed.
  *Recommendation*: Partition. 1.5*RAM.

- A ~/~ partition

***** Optional
- If boot mode is BIOS, a ~/boot~ partition helps manage grub and
  different kernels for multiple linux installations.
- ~/home~ would allow you to take your environment elsewhere.
*** Format partitions
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
mkswap "$swap_partition"
mkfs.ext4 "$system_partition"
#+END_SRC

**** Explanation
Create the file system structure: ~mkfs.<fstype>~.
For swap:
~mkswap <dev>~
*** Mount partitions
**** Run
#+BEGIN_SRC shell :tangle custom.sh
system_mp='/mnt'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_live.sh
# Enable swap
swapon "$swap_partition"
# Mount system
mount "$system_partition" "$system_mp"
#+END_SRC

**** Explanation
Enable swap: ~swapon <dev>~.
Create mount points (~/boot~, ~/efi~, ...) on ~/mnt~. and mount on ~/mnt~ the
root partition.

~mount <device> <mountpoint>~

Use ~-t <type>~ if there are problems autodetecting the filetype.

*** Install packages
**** Run

#+BEGIN_SRC shell :tangle custom.sh
# Required packages for the system to work
pacstrap_pkgs='base linux linux-firmware'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_live.sh
# Install required packages
pacstrap "$system_mp" $pacstrap_pkgs
#+END_SRC

**** Explanation
1. Configure mirrors on ~/etc/pacman.d/mirrorlist~. Default order
   is based on sync status and speed. This file will be copied
   to the system.
2. Install required packages with ~pacstrap~.
   - ~pacstrap /mnt <package1> <package2>â€¦~
   - Required packages: ~base linux linux-firmware~
   - Recommended packages: ~man-db man-pages texinfo~

Use ~pacstrap~ to install packages from the live system. Alternatively use ~pacman~
while chrooted( use ~arch-chroot /mnt~ ).

To Consider:
- Userspace utilities for the management of file systems that will be
  used on the system.
- Utilities for accessing RAID or LVM partitions.
- Specific firmware for other devices not included in linux-firmware.
- Software necessary for networking.
- A text editor.

** Basic system configuration
*** From live system
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
# Generate fstab from live environment
genfstab -U /mnt >> /mnt/etc/fstab
#+END_SRC

**** Explanation
Generate fstab file and put it in place for the new system.

*** Enter the new system
**** Run
#+BEGIN_SRC shell :tangle run_in_live.sh
# Copy script to new system
cp custom.sh run_in_system.sh /mnt/
# Copies default overrides
[ -r "$custom_override_file" ] && \
    cp "$custom_override_file" /mnt/ || \
    echo 'No override of custom values'

echo 'Done with live system, entering the new system'

# Enter system and run script
arch-chroot /mnt /run_in_system.sh
#+END_SRC

**** Explanation
Run the installation file in the new system.

*** Source config
#+BEGIN_SRC shell :tangle run_in_system.sh :shebang "#!/bin/bash"
# Source configuration variables
. ./custom.sh
#+END_SRC

*** Set timezone
**** Run
#+BEGIN_SRC shell :tangle custom.sh
# Set timezone in format 'Region/City'
timezone='Europe/Madrid'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
# Set timezone
ln -sf /usr/share/zoneinfo/"$timezone" /etc/localtime
#+END_SRC

**** Explanation
Available timezones are located in ~/usr/share/zoneinfo/<Region>/<City>~.
Enabled timezone should be located in ~/etc/localtime~.

*** Set hardware clock
**** Run
#+BEGIN_SRC shell :tangle run_in_system.sh
# Sync HW clock
hwclock --systohc
#+END_SRC

**** Explanation
Set ~/etc/adjtime~ with ~hwclock~. This assumes that the clock is set to UTC.

*** Set locale
**** Run
#+BEGIN_SRC shell :tangle custom.sh
# Part of regex, escape characters
locale_list='es_ES\.UTF-8 en_US\.UTF-8'
# Not part of regex
locale_selected='es_ES.UTF-8'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
# Set locale
uncomment_locales(){
    local locale_list="$@"
    local locale_list_regexp=''
    local locale_list_regexp_separator=''

    for i_locale in $locale_list;
    do
        locale_list_regexp="$locale_list_regexp""$locale_list_regexp_separator"
        locale_list_regexp_separator='\|'

        locale_list_regexp="$locale_list_regexp""\($i_locale.*\)"
    done

    locale_regexp=$(printf 's/#\(%s\)$/\\1/' "$locale_list_regexp"  )

    sed -i "$locale_regexp" /etc/locale.gen
}

uncomment_locales "$locale_list"
locale-gen

echo "LANG=$locale_selected" >/etc/locale.conf
#+END_SRC

**** Explanation
Uncomment desired locales on ~/etc/locale.gen~.
Generate them with: ~locale-gen~

Create the ~/etc/locale.conf~ file, and set the LANG variable accordingly.
~LANG=es_ES.UTF-8~.
With ~systemd~ you can just do ~localectl set-locale es_ES.UTF-8~. But for some
reason it fails saying ~Specified locale is not installed~.

*** Set vconsole keymap
**** Run
#+BEGIN_SRC shell :tangle custom.sh
# Same as in loadkeys
vconsole_keymap='es'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
# Set vconsole keymap
echo "KEYMAP=$vconsole_keymap" >/etc/vconsole.conf
#+END_SRC

**** Explanation
Make console keyboard persistent on ~/etc/vconsole.conf~. Maybe fonts too?.
~KEYMAP=es~.
Systemd only: ~localectl set-keymap es es~.

*** Set root password
**** Run
#+BEGIN_SRC shell :tangle custom.sh
# Plain text root password
root_passwd='1234'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
# Change root password
printf 'root:%s\n' "$root_passwd" |\
    chpasswd
#+END_SRC

**** Explanation
Set root password: ~passwd~. Default: ~1234~.

*** Basic network
**** Set host name
***** Run
#+BEGIN_SRC shell :tangle custom.sh
# Only hostname
host_name='mypc'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
# Set hostname
echo "$host_name" >/etc/hostname
#+END_SRC

***** Explanation
Create ~/etc/hostname~ with the local name of the machine. Ex: ~arch-vm~.

**** Set hosts file
***** Run
#+BEGIN_SRC shell :tangle custom.sh
# Only domain name
domain_name='localdomain'
# '127.0.1.1' or externally visible IP
external_ip='127.0.1.1'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
# Build hosts file
cat <<EOF >/etc/hosts
127.0.0.1     localhost
::1           localhost
$external_ip  $host_name.$domain_name  $host_name
EOF
#+END_SRC

***** Explanation
Create hosts file and fill it.

Substitute ~127.0.1.1~ with the hosts permanent IP if it has one.

**** NOTE
No networking software is installed here, so either configure ~systemd~ or
you will have to configure your connection by hand each time.

*** Create unprivileged user
**** Run
#+BEGIN_SRC shell :tangle custom.sh
# New user info
new_user_name='daniel'
new_user_password='1234'
#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
# Create a new unprivileged user
useradd -m "$new_user_name"
printf '%s:%s\n' "$new_user_name" "$new_user_password" |\
    chpasswd
#+END_SRC

**** Explanation
Create a regular user with less privileges for regular use.

** System customization
*** Install packages
**** Run
#+BEGIN_SRC shell :tangle custom.sh
# Packages to install once the system is working

# Man and info
user_pkgs='man-db man-pages texinfo'

# Windows file system drivers
user_pkgs="$user_pkgs ntfs-3g"

# Bootloader - GRUB
user_pkgs="$user_pkgs grub os-prober"

# Processor ucode updates
# !!! SELECT ONE OF THIS TWO !!!!
#user_pkgs="$user_pkgs amd-ucode"
user_pkgs="$user_pkgs intel-ucode"

# Vim
user_pkgs="$user_pkgs vim"

# Networking
# Network Manager is kind of overkill, but it works.
user_pkgs="$user_pkgs networkmanager"
# Graphical goodies for network manager
user_pkgs="$user_pkgs nm-connection-editor network-manager-applet"

# Bash completion
user_pkgs="$user_pkgs bash-completion"

# Sudo
user_pkgs="$user_pkgs sudo"

#+END_SRC

#+BEGIN_SRC shell :tangle run_in_system.sh
pacman -Syu --noconfirm $user_pkgs
#+END_SRC

**** Explanation
Install all the packages you want in the system. Add them to ~$user_pkgs~.

*** Configure new software
**** Sudo
***** Run
#+BEGIN_SRC shell :tangle run_in_system.sh
### Sudo config ###
# Adding sudo group config
echo "Members of group sudo can execute anything with their password" >/etc/sudoers.d/20_sudo_group
echo "%sudo	ALL=(ALL) ALL" >>/etc/sudoers.d/20_sudo_group
# Fixing permissions
chmod 440 /etc/sudoers.d/20_sudo_group

# Creating sudo group
groupadd sudo

# Adding user to sudo group
usermod -aG sudo "$new_user_name"
#+END_SRC

***** Explanation
Using ~/etc/sudoers.d~ because its cleaner.

*** Enable services
**** Run
#+BEGIN_SRC shell :tangle run_in_system.sh
systemctl enable NetworkManager
#+END_SRC

**** Explanation
Enable required services here.

*** Setup boot loader(GRUB) and microcode updates
**** Run
#+BEGIN_SRC shell :tangle run_in_system.sh
# MBR/GPT only
grub-install --target=i386-pc "$system_device"
# Configure
cat <<EOF >>/boot/grub/custom.cfg
menuentry "Shutdown" {
	echo "Powering off..."
	halt
}

menuentry "Reboot" {
	echo "Rebooting..."
	reboot
}
EOF

grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC

**** Explanation
Install grub on the beginning of the selected disk.

To configure custom entries, they can be appended to
~/etc/grub.d/40_custom~ (Requires reload on changes) or put in
~/boot/grub/custom.cfg~ (Does not require reload).

~/etc/grub.d/40_custom~ can be used as a template to create
~/etc/grub.d/nn_custom~, where ~nn~ defines the precedence,
indicating the order the script is executed. The order scripts
are executed determine the placement in the GRUB boot menu. ~nn~
should be greater than ~06~ to ensure necessary scripts are
executed first.

~os-prober~ may need ~ntfs-3g~ to detect Windows.

***** Add kernel arguments
Set the ~GRUB_CMDLINE_LINUX~ + ~GRUB_CMDLINE_LINUX_DEFAULT~
variables in ~/etc/default/grub~. The two are appended to each
other and passed to kernel when generating regular boot
entries. For the recovery boot entry, only ~GRUB_CMDLINE_LINUX~
is used in the generation.

***** GRUB detects automatically microcode updates
Just install ~amd-ucode~ or ~intel-ucode~.

Check if it has been updated with ~dmesg | grep microcode~. Look
for ~microcode updated early to revision 0x1b, date =
2014-05-29~. And only ~microcode: CPU0 sig=0x306a9, pf=0x2,
revision=0x1b~ when there are no updates. Also ~microcode:
Microcode Update Driver: v2.2~.

*** Finish message
**** Run
#+BEGIN_SRC shell :tangle run_in_system.sh
echo 'Finished configuring system'
#+END_SRC

*** Probably not required
For LVM, system encryption or RAID, modify ~/etc/mkinitcpio.conf~ and recreate the initramfs image.
~mkinitcpio -P~

*** Add override to custom values
**** Run
#+BEGIN_SRC shell :tangle custom.sh
# Override defaults here
. ./"$custom_override_file"
#+END_SRC

**** Explanation
Override the default values in your own file (~custom_override.sh~).

